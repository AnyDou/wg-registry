package generate

import (
	"bytes"
	"text/template"
	"time"

	"github.com/sosedoff/wg-registry/model"
	"github.com/sosedoff/wg-registry/store"
)

var (
	serverTemplate = `
# =========================================================
# CONFIG AUTOGENERATED ON {{ .date }}
# =========================================================

[Interface]
PrivateKey = {{ .privateKey }}
Address = {{ .address }}
ListenPort = {{ .listenPort }}
{{ if .postUp }}PostUp = {{ .postUp }}{{ end }}
{{ if .postDown }}PostDown = {{ .postDown }}{{ end }}
{{ range .peers }}
[Peer]
PublicKey = {{ .PublicKey }}
AllowedIPs = {{ .IPV4 }}/32
{{ if gt .PersistentKeepalive 0 }}PersistentKeepalive = {{ .PersistentKeepalive }}{{ end }}
{{ end }}
`

	clientTemplate = `
[Interface]
PrivateKey = {{ .privateKey }}
Address = {{ .address }}
{{ if ne .dns "" }}DNS = {{ .dns }}{{ end }}
{{ range .peers }}
[Peer]
PublicKey = {{ .PublicKey }}
Endpoint = {{ .PublicAddr }}
AllowedIPs = {{ .IPV4Net }}
{{ if $.keepAlive }}PersistentKeepalive = {{ $.keepAlive }}{{ end }}
{{ end }}
	`
)

// ServerConfig generates wireguard server config
func ServerConfig(store store.Store, server *model.Server) ([]byte, error) {
	tpl, err := template.New("config").Parse(serverTemplate)
	if err != nil {
		return nil, err
	}

	devices, err := store.AllDevices()
	if err != nil {
		return nil, err
	}

	out := bytes.NewBuffer(nil)
	err = tpl.Execute(out, map[string]interface{}{
		"date":       time.Now().Format(time.RFC850),
		"privateKey": server.PrivateKey,
		"address":    server.IPV4Net,
		"listenPort": server.ListenPort,
		"postUp":     server.PostUp,
		"postDown":   server.PostDown,
		"peers":      devices,
	})

	return bytes.TrimSpace(out.Bytes()), err
}

// ClientConfig generate wireguard client config
func ClientConfig(store store.Store, device *model.Device, server *model.Server) ([]byte, error) {
	tpl, err := template.New("config").Parse(clientTemplate)
	if err != nil {
		return nil, err
	}

	out := bytes.NewBuffer(nil)

	err = tpl.Execute(out, map[string]interface{}{
		"date":       time.Now().Format(time.RFC850),
		"privateKey": device.PrivateKey,
		"address":    device.PeerIP(server.IPV4Net),
		"keepAlive":  device.PersistentKeepalive,
		"dns":        server.DNS,
		"peers":      []*model.Server{server},
	})

	return bytes.TrimSpace(out.Bytes()), err
}
